import mongoose from "mongoose";
import dotenv from "dotenv";
import Order from "../models/Order.js";
import Product from "../models/Product.js";

// Load bi·∫øn m√¥i tr∆∞·ªùng t·ª´ .env
dotenv.config();

// Ki·ªÉm tra bi·∫øn m√¥i tr∆∞·ªùng
if (!process.env.CONNECT_STRING) {
  console.error("‚ùå L·ªói: Bi·∫øn m√¥i tr∆∞·ªùng CONNECT_STRING kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y!");
  process.exit(1);
}

// K·∫øt n·ªëi MongoDB
mongoose.connect(process.env.CONNECT_STRING, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
}).then(() => {
  console.log("‚úÖ K·∫øt n·ªëi MongoDB th√†nh c√¥ng!");
  updateBestSellers();
}).catch((err) => {
  console.error("‚ùå L·ªói k·∫øt n·ªëi MongoDB:", err);
  process.exit(1);
});

const updateBestSellers = async () => {
  try {
    console.log("üîÑ ƒêang c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m b√°n ch·∫°y...");

    // L·∫•y t·∫•t c·∫£ ƒë∆°n h√†ng ƒë√£ giao
    const completedOrders = await Order.find({ status: "ƒê√£ giao" });

    // T·∫°o b·∫£ng t·ªïng h·ª£p s·ªë l∆∞·ª£ng b√°n
    const salesMap = new Map();

    completedOrders.forEach((order) => {
      order.products.forEach((item) => {
        const productId = item.product.toString();
        salesMap.set(productId, (salesMap.get(productId) || 0) + item.quantity);
      });
    });

    // C·∫≠p nh·∫≠t totalSold c·ªßa t·ª´ng s·∫£n ph·∫©m
    for (const [productId, totalSold] of salesMap) {
      await Product.findByIdAndUpdate(productId, { totalSold });
    }

    console.log("‚úÖ C·∫≠p nh·∫≠t s·∫£n ph·∫©m b√°n ch·∫°y th√†nh c√¥ng!");
  } catch (error) {
    console.error("‚ùå L·ªói c·∫≠p nh·∫≠t s·∫£n ph·∫©m b√°n ch·∫°y:", error);
  } finally {
    mongoose.connection.close();
  }
};
