import express from "express";
import mongoose from "mongoose";
import Warehouse from "../models/Warehouse.js";
import Inventory from "../models/Inventory.js"; // Ki·ªÉm tra kho c√≥ ch·ª©a h√†ng kh√¥ng

const router = express.Router();

// Middleware ki·ªÉm tra vai tr√≤ (ch·ªâ cho ph√©p admin/manager th·ª±c hi·ªán thay ƒë·ªïi)
const checkRole = async (req, res, next) => {
  const token = req.headers.authorization?.split(" ")[1];
  if (!token) {
    return res.status(401).json({ message: "Kh√¥ng c√≥ token!" });
  }
  // Logic ki·ªÉm tra role (gi·∫£ ƒë·ªãnh b·∫°n c√≥ h·ªá th·ªëng auth)
  next();
};

// üè¢ **L·∫•y danh s√°ch t·∫•t c·∫£ kho**
router.get("/", async (req, res) => {
  try {
    const warehouses = await Warehouse.find().lean();
    res.json(warehouses);
  } catch (err) {
    res.status(500).json({ message: "L·ªói server: " + err.message });
  }
});

// üìç **L·∫•y th√¥ng tin kho theo ID**
router.get("/:id", async (req, res) => {
  try {
    if (!mongoose.Types.ObjectId.isValid(req.params.id)) {
      return res.status(400).json({ message: "ID kh√¥ng h·ª£p l·ªá!" });
    }
    const warehouse = await Warehouse.findById(req.params.id);
    if (!warehouse) return res.status(404).json({ message: "Kho kh√¥ng t·ªìn t·∫°i" });
    res.json(warehouse);
  } catch (err) {
    res.status(500).json({ message: "L·ªói server: " + err.message });
  }
});

// üì¶ **T·∫°o kho m·ªõi**
router.post("/", checkRole, async (req, res) => {
  const { name, location, capacity } = req.body;

  // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
  if (!name || !location?.city) {
    return res.status(400).json({ message: "T√™n kho v√† th√†nh ph·ªë l√† b·∫Øt bu·ªôc!" });
  }
  if (capacity && isNaN(capacity)) {
    return res.status(400).json({ message: "Dung l∆∞·ª£ng ph·∫£i l√† s·ªë!" });
  }

  try {
    const warehouse = new Warehouse({
      name,
      location,
      capacity: capacity ? parseInt(capacity) : undefined,
    });

    const newWarehouse = await warehouse.save();
    res.status(201).json(newWarehouse);
  } catch (err) {
    res.status(400).json({ message: "L·ªói khi t·∫°o kho: " + err.message });
  }
});

// üìù **C·∫≠p nh·∫≠t th√¥ng tin kho**
router.put("/:id", checkRole, async (req, res) => {
  const { name, location, capacity } = req.body;

  try {
    if (!mongoose.Types.ObjectId.isValid(req.params.id)) {
      return res.status(400).json({ message: "ID kh√¥ng h·ª£p l·ªá!" });
    }

    const warehouse = await Warehouse.findById(req.params.id);
    if (!warehouse) return res.status(404).json({ message: "Kho kh√¥ng t·ªìn t·∫°i" });

    // C·∫≠p nh·∫≠t th√¥ng tin n·∫øu c√≥
    warehouse.name = name || warehouse.name;
    warehouse.location = location || warehouse.location;
    warehouse.capacity = capacity ? parseInt(capacity) : warehouse.capacity;

    const updatedWarehouse = await warehouse.save();
    res.json(updatedWarehouse);
  } catch (err) {
    res.status(400).json({ message: "L·ªói khi c·∫≠p nh·∫≠t kho: " + err.message });
  }
});

// ‚ùå **X√≥a kho**
router.delete("/:id", checkRole, async (req, res) => {
  try {
    if (!mongoose.Types.ObjectId.isValid(req.params.id)) {
      return res.status(400).json({ message: "ID kh√¥ng h·ª£p l·ªá!" });
    }

    const warehouse = await Warehouse.findById(req.params.id);
    if (!warehouse) return res.status(404).json({ message: "Kho kh√¥ng t·ªìn t·∫°i" });

    // Ki·ªÉm tra kho c√≥ ƒëang ch·ª©a h√†ng kh√¥ng
    const inventoryInUse = await Inventory.findOne({ warehouse: req.params.id });
    if (inventoryInUse) {
      return res.status(400).json({ message: "Kh√¥ng th·ªÉ x√≥a kho ƒëang ch·ª©a h√†ng!" });
    }

    await Warehouse.findByIdAndDelete(req.params.id);
    res.json({ message: "X√≥a kho th√†nh c√¥ng" });
  } catch (err) {
    res.status(500).json({ message: "L·ªói server: " + err.message });
  }
});

export default router;
